name: Deploy Agenda to Azure VM

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Create temporary NSG rule for deployment
        run: |
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Runner IP: $RUNNER_IP"
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          
          RULE_NAME="AgendaDeploy-$(date +%s)"
          echo "RULE_NAME=$RULE_NAME" >> $GITHUB_ENV
          
          az network nsg rule create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --nsg-name ${{ secrets.AZURE_NSG_NAME }} \
            --name $RULE_NAME \
            --protocol Tcp \
            --priority 200 \
            --destination-port-range ${{ secrets.SSH_PORT }} \
            --source-address-prefix $RUNNER_IP \
            --access Allow \
            --direction Inbound \
            --description "Agenda deployment temporary access"
          
          echo "Waiting 60 seconds for NSG rule to take effect across Azure network..."
          sleep 60
          
          echo "Verifying NSG rule was created:"
          az network nsg rule show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --nsg-name ${{ secrets.AZURE_NSG_NAME }} \
            --name $RULE_NAME \
            --output table || echo "Warning: Could not verify NSG rule"

      - name: Test connectivity before deployment
        run: |
          echo "Testing SSH connectivity to ${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}"
          
          if timeout 10 nc -z ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }}; then
            echo "SSH port is accessible"
          else
            echo "SSH port is not accessible - NSG rule may not be active yet"
            echo "Waiting additional 30 seconds..."
            sleep 30
            
            if timeout 10 nc -z ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }}; then
              echo "SSH port is now accessible"
            else
              echo "SSH port still not accessible after additional wait"
              exit 1
            fi
          fi

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 400 ~/.ssh/deploy_key
          chown $(whoami):$(whoami) ~/.ssh/deploy_key
          
          echo "SSH key permissions:"
          ls -la ~/.ssh/deploy_key

      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key_path: ~/.ssh/deploy_key
          timeout: 60s
          debug: true
          script: |
            set -e
            cd ${{ secrets.PROJECT_PATH }}
            
            git fetch --all
            git reset --hard origin/master
            
            if [ ! -d "venv" ]; then
                python3 -m venv venv
            fi
            source venv/bin/activate

            pip install --upgrade pip
            pip install -r requirements.txt
            
            cd backend
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            
            cd ../frontend
            npm ci
            npm run build
            
            sudo systemctl restart agenda-backend
            sudo systemctl reload nginx
            
            echo "Agenda deployment completed successfully!"

      - name: Cleanup NSG rule
        if: always()
        run: |
          if [ -n "$RULE_NAME" ]; then
            az network nsg rule delete \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --nsg-name ${{ secrets.AZURE_NSG_NAME }} \
              --name $RULE_NAME || echo "Failed to remove NSG rule - check Azure portal"
          fi
